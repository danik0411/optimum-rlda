# this file runs 

rm(list=ls(all=TRUE));

source("skew_applyAllEstimators.R");
source("plotAllFigures.R");

qqq = new.env();

PATH_PROJ=getwd();

environment( skew_applyAllEstimators ) = qqq;
environment( plotAllFigures ) = qqq;

# setting up the parameters
# define parameters of the run
#sampleSize=seq(30,150,by=10);
#featureSize = c(5,20,50,150);
sampleSize = seq(30,50,by=10);
featureSize = 20;
mahDistance = 5;
#repetition=500;
repetition=5;

alphav = 1; # it should be {1,2,4}

gammaBase = 100^(1/20);
gammaValues = gammaBase^(c(-10:20));

checkValue = 0; kappa = 1;

estimatorsON = c(TRUE,TRUE,TRUE,TRUE,TRUE); #double,cv,loo,plugin,true

print(paste("running the data for alpha of " , as.character(alphav) , sep=""));

for( j in 1:length(featureSize) ) {

alphavv = rep(alphav, featureSize[j]);	# it should be {1,2,4}

for( k in 1:length(sampleSize) ) {


# write current sample size and apply all estimators
currentSampleSize = sampleSize[k];

# store data in tempFileName
tempPrefile = paste(PATH_PROJ, "/temp/temp_" , 
				as.character(alphavv) , sep="");

tempFileName = paste( tempPrefile , 
		      as.character(currentSampleSize), "s_" ,
		      as.character(featureSize[j]) , "p_" , sep="");

print("running the applyAllEstimators");
skew_applyAllEstimators( currentSampleSize , alphavv , featureSize[j] , repetition , gammaValues , checkValue , kappa , tempFileName );

# load all temp files and combine into a single file
vars_double = paste(tempFileName, "_double", sep="");
vars_cv     = paste(tempFileName, "_cv",sep="");
vars_loo    = paste(tempFileName, "_loo",sep="");
vars_plugin = paste(tempFileName, "_plugin",sep="");
vars_true   = paste(tempFileName, "_true",sep="");

data_double = load(vars_double);
data_cv     = load(vars_cv);
data_loo    = load(vars_loo);
data_plugin = load(vars_plugin);
data_true   = load(vars_true);

inputVars = c(data_double, data_cv, data_loo, data_plugin, data_true);
outputVars = array( -1 , dim=length(inputVars));

print("saving data for each sampleValue");
# combine variables name into outputVars
for( k in 1:length(inputVars) ) {
     # PATH varName m p
     # outputVars is synth_totalErrorDouble_0.75m_150p_30s
     outputVars[k] = paste( "synth_" , inputVars[k] , "_" , as.character(alphavv) , "a_" , as.character(featureSize[j]) , "p_" , as.character(currentSampleSize) , sep="");
     expression = paste( outputVars[k] , "=" , inputVars[k] , sep="");
     eval(parse(text=expression));
}

# tempPrefile_MP is temp_0.75m_150p_
# tempFileName is temp_0.75m_150p_30s
tempPrefile_MP = paste(tempPrefile , as.character(alphavv) , "a_" , as.character(featureSize[j]) , "p_" , sep="");
tempFileName = paste( tempPrefile_MP , as.character(currentSampleSize) , "s" , sep="" );

# store the output of the current sample number in tempFileName
#save( list=outputVars, file=tempFileName);

rm( list=inputVars );

} 

# combine all data from all saved sampleNumbers data

print("all computations on sampleValues has been finished, moving data into a single file");

# firstly create variables
estimatorsName = c("Double" , "CV" , "LOO" , "Plugin" , "True");
mainVariableName = c("Error" , "Time");
allVarsName = "sampleText"; counter = 0; # will be used in future

# to create varibales for totalTime and totalError
s2 = "22";
s2[1] = paste("array(0 , dim=c(repetition, length(gammaValues) , length(sampleSize) ))");
s2[2] = paste("array(0 , dim=c(length(sampleSize) , repetition))");

for ( e1 in 1:length(estimatorsName) ){
    for( e2 in 1:length(mainVariableName) ){
    	 counter=counter+1;
    	 s1 = paste("synth_total" , mainVariableName[e2] , estimatorsName[e1] , sep="");

    	 expression = paste( s1, "=" , s2[e2] , sep="");
	 print(expression);
	 eval(parse(text=expression));

	 allVarsName[counter] = s1;

    }
}

print("variables created");
for ( e1 in 1:length(sampleSize) ) {
    # loadFileName = temp_0.75m_150p_30s
    loadFileName = paste( tempPrefile_MP , as.character(sampleSize[e1]) , "s" , sep="");
    varsInFile = load(loadFileName);
    for ( e2 in 1:length( allVarsName ) ){
    	# pick the value from allVarsName, and find similar in varsInFile, and write it

	# varType TRUE if TIME, false if not
	varType = grepl( "Time" , allVarsName[e2] );
	print(allVarsName[e2]);
	print(varType);
	if ( varType == TRUE ) {
	s0 = paste("[" , as.character(e1) , ",]");}
	else {
	s0 = paste("[,," , as.character(e1) , "]");}
	
	s1 = paste(allVarsName[e2] , s0 );
	s2 = grep( x=varsInFile , pattern=allVarsName[e2] , value=TRUE);
	expression = paste(s1,"=",s2,sep="");
	print(expression);
	eval(parse(text=expression));
    	
    }
}

outputFileName = paste( PATH_PROJ , "/dist" , as.character( alphavv ) , "/synthCompData" , as.character( featureSize[j] ) , "p.RData" , sep="");

print(outputFileName);

#save( list=c( allVarsName, "gammaValues" , "sampleSize" , "repetition" ), file=outputFileName );

print("data moves succesfully");

rm( list=allVarsName );

print("plotting figures");

prefile = paste( PATH_PROJ , "/dist" , as.character( alphavv ) , "/p" , as.character(featureSize[j]) , "_" , sep="");
plotAllFigures( outputFileName , prefile );

}
